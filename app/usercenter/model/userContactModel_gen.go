// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userContactFieldNames          = builder.RawFieldNames(&UserContact{})
	userContactRows                = strings.Join(userContactFieldNames, ",")
	userContactRowsExpectAutoSet   = strings.Join(stringx.Remove(userContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userContactRowsWithPlaceHolder = strings.Join(stringx.Remove(userContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookUsercenterUserContactIdPrefix = "cache:looklookUsercenter:userContact:id:"
)

type (
	userContactModel interface {
		Insert(ctx context.Context, data *UserContact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserContact, error)
		Update(ctx context.Context, data *UserContact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserContactModel struct {
		sqlc.CachedConn
		table string
	}

	UserContact struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		Type       int64     `db:"type"`    // 1qrcode 2phone 3shop
		Content    string    `db:"content"` // content
		Remark     string    `db:"remark"`  // remark
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUserContactModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserContactModel {
	return &defaultUserContactModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_contact`",
	}
}

func (m *defaultUserContactModel) Delete(ctx context.Context, id int64) error {
	looklookUsercenterUserContactIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserContactIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookUsercenterUserContactIdKey)
	return err
}

func (m *defaultUserContactModel) FindOne(ctx context.Context, id int64) (*UserContact, error) {
	looklookUsercenterUserContactIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserContactIdPrefix, id)
	var resp UserContact
	err := m.QueryRowCtx(ctx, &resp, looklookUsercenterUserContactIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userContactRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserContactModel) Insert(ctx context.Context, data *UserContact) (sql.Result, error) {
	looklookUsercenterUserContactIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserContactIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userContactRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.Remark)
	}, looklookUsercenterUserContactIdKey)
	return ret, err
}

func (m *defaultUserContactModel) Update(ctx context.Context, data *UserContact) error {
	looklookUsercenterUserContactIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserContactIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userContactRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.Remark, data.Id)
	}, looklookUsercenterUserContactIdKey)
	return err
}

func (m *defaultUserContactModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookUsercenterUserContactIdPrefix, primary)
}

func (m *defaultUserContactModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userContactRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserContactModel) tableName() string {
	return m.table
}

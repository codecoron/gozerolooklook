// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package server

import (
	"context"

	"looklook/app/usercenter/cmd/rpc/internal/logic"
	"looklook/app/usercenter/cmd/rpc/internal/svc"
	"looklook/app/usercenter/cmd/rpc/pb"
)

type UsercenterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUsercenterServer
}

func NewUsercenterServer(svcCtx *svc.ServiceContext) *UsercenterServer {
	return &UsercenterServer{
		svcCtx: svcCtx,
	}
}

func (s *UsercenterServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UsercenterServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UsercenterServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UsercenterServer) GetUserAuthByAuthKey(ctx context.Context, in *pb.GetUserAuthByAuthKeyReq) (*pb.GetUserAuthByAuthKeyResp, error) {
	l := logic.NewGetUserAuthByAuthKeyLogic(ctx, s.svcCtx)
	return l.GetUserAuthByAuthKey(in)
}

func (s *UsercenterServer) GetUserAuthByUserId(ctx context.Context, in *pb.GetUserAuthByUserIdReq) (*pb.GetUserAuthyUserIdResp, error) {
	l := logic.NewGetUserAuthByUserIdLogic(ctx, s.svcCtx)
	return l.GetUserAuthByUserId(in)
}

func (s *UsercenterServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UsercenterServer) UpdateUserBaseInfo(ctx context.Context, in *pb.UpdateUserBaseInfoReq) (*pb.UpdateUserBaseInfoResp, error) {
	l := logic.NewUpdateUserBaseInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserBaseInfo(in)
}

func (s *UsercenterServer) SetAdmin(ctx context.Context, in *pb.SetAdminReq) (*pb.SetAdminResp, error) {
	l := logic.NewSetAdminLogic(ctx, s.svcCtx)
	return l.SetAdmin(in)
}

func (s *UsercenterServer) CheckIsAdmin(ctx context.Context, in *pb.CheckIsAdminReq) (*pb.CheckIsAdminResp, error) {
	l := logic.NewCheckIsAdminLogic(ctx, s.svcCtx)
	return l.CheckIsAdmin(in)
}

// -----------------------用户联系方式----------------------
func (s *UsercenterServer) AddUserContact(ctx context.Context, in *pb.AddUserContactReq) (*pb.AddUserContactResp, error) {
	l := logic.NewAddUserContactLogic(ctx, s.svcCtx)
	return l.AddUserContact(in)
}

func (s *UsercenterServer) UpdateUserContact(ctx context.Context, in *pb.UpdateUserContactReq) (*pb.UpdateUserContactResp, error) {
	l := logic.NewUpdateUserContactLogic(ctx, s.svcCtx)
	return l.UpdateUserContact(in)
}

func (s *UsercenterServer) DelUserContact(ctx context.Context, in *pb.DelUserContactReq) (*pb.DelUserContactResp, error) {
	l := logic.NewDelUserContactLogic(ctx, s.svcCtx)
	return l.DelUserContact(in)
}

func (s *UsercenterServer) GetUserContactById(ctx context.Context, in *pb.GetUserContactByIdReq) (*pb.GetUserContactByIdResp, error) {
	l := logic.NewGetUserContactByIdLogic(ctx, s.svcCtx)
	return l.GetUserContactById(in)
}

func (s *UsercenterServer) SearchUserContact(ctx context.Context, in *pb.SearchUserContactReq) (*pb.SearchUserContactResp, error) {
	l := logic.NewSearchUserContactLogic(ctx, s.svcCtx)
	return l.SearchUserContact(in)
}

// -----------------------用户收货地址表-----------------------
func (s *UsercenterServer) AddUserAddress(ctx context.Context, in *pb.AddUserAddressReq) (*pb.AddUserAddressResp, error) {
	l := logic.NewAddUserAddressLogic(ctx, s.svcCtx)
	return l.AddUserAddress(in)
}

func (s *UsercenterServer) UpdateUserAddress(ctx context.Context, in *pb.UpdateUserAddressReq) (*pb.UpdateUserAddressResp, error) {
	l := logic.NewUpdateUserAddressLogic(ctx, s.svcCtx)
	return l.UpdateUserAddress(in)
}

func (s *UsercenterServer) DelUserAddress(ctx context.Context, in *pb.DelUserAddressReq) (*pb.DelUserAddressResp, error) {
	l := logic.NewDelUserAddressLogic(ctx, s.svcCtx)
	return l.DelUserAddress(in)
}

func (s *UsercenterServer) GetUserAddressById(ctx context.Context, in *pb.GetUserAddressByIdReq) (*pb.GetUserAddressByIdResp, error) {
	l := logic.NewGetUserAddressByIdLogic(ctx, s.svcCtx)
	return l.GetUserAddressById(in)
}

func (s *UsercenterServer) SearchUserAddress(ctx context.Context, in *pb.SearchUserAddressReq) (*pb.SearchUserAddressResp, error) {
	l := logic.NewSearchUserAddressLogic(ctx, s.svcCtx)
	return l.SearchUserAddress(in)
}

// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenter

import (
	"context"

	"looklook/app/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserAddressReq        = pb.AddUserAddressReq
	AddUserAddressResp       = pb.AddUserAddressResp
	AddUserContactReq        = pb.AddUserContactReq
	AddUserContactResp       = pb.AddUserContactResp
	CheckIsAdminReq          = pb.CheckIsAdminReq
	CheckIsAdminResp         = pb.CheckIsAdminResp
	DelUserAddressReq        = pb.DelUserAddressReq
	DelUserAddressResp       = pb.DelUserAddressResp
	DelUserContactReq        = pb.DelUserContactReq
	DelUserContactResp       = pb.DelUserContactResp
	GenerateTokenReq         = pb.GenerateTokenReq
	GenerateTokenResp        = pb.GenerateTokenResp
	GetUserAddressByIdReq    = pb.GetUserAddressByIdReq
	GetUserAddressByIdResp   = pb.GetUserAddressByIdResp
	GetUserAuthByAuthKeyReq  = pb.GetUserAuthByAuthKeyReq
	GetUserAuthByAuthKeyResp = pb.GetUserAuthByAuthKeyResp
	GetUserAuthByUserIdReq   = pb.GetUserAuthByUserIdReq
	GetUserAuthyUserIdResp   = pb.GetUserAuthyUserIdResp
	GetUserContactByIdReq    = pb.GetUserContactByIdReq
	GetUserContactByIdResp   = pb.GetUserContactByIdResp
	GetUserInfoReq           = pb.GetUserInfoReq
	GetUserInfoResp          = pb.GetUserInfoResp
	LoginReq                 = pb.LoginReq
	LoginResp                = pb.LoginResp
	RegisterReq              = pb.RegisterReq
	RegisterResp             = pb.RegisterResp
	SearchUserAddressReq     = pb.SearchUserAddressReq
	SearchUserAddressResp    = pb.SearchUserAddressResp
	SearchUserContactReq     = pb.SearchUserContactReq
	SearchUserContactResp    = pb.SearchUserContactResp
	SetAdminReq              = pb.SetAdminReq
	SetAdminResp             = pb.SetAdminResp
	UpdateUserAddressReq     = pb.UpdateUserAddressReq
	UpdateUserAddressResp    = pb.UpdateUserAddressResp
	UpdateUserContactReq     = pb.UpdateUserContactReq
	UpdateUserContactResp    = pb.UpdateUserContactResp
	User                     = pb.User
	UserAddress              = pb.UserAddress
	UserAuth                 = pb.UserAuth
	UserContact              = pb.UserContact

	Usercenter interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error)
		CheckIsAdmin(ctx context.Context, in *CheckIsAdminReq, opts ...grpc.CallOption) (*CheckIsAdminResp, error)
		// -----------------------用户联系方式----------------------
		AddUserContact(ctx context.Context, in *AddUserContactReq, opts ...grpc.CallOption) (*AddUserContactResp, error)
		UpdateUserContact(ctx context.Context, in *UpdateUserContactReq, opts ...grpc.CallOption) (*UpdateUserContactResp, error)
		DelUserContact(ctx context.Context, in *DelUserContactReq, opts ...grpc.CallOption) (*DelUserContactResp, error)
		GetUserContactById(ctx context.Context, in *GetUserContactByIdReq, opts ...grpc.CallOption) (*GetUserContactByIdResp, error)
		SearchUserContact(ctx context.Context, in *SearchUserContactReq, opts ...grpc.CallOption) (*SearchUserContactResp, error)
		// -----------------------用户收货地址表-----------------------
		AddUserAddress(ctx context.Context, in *AddUserAddressReq, opts ...grpc.CallOption) (*AddUserAddressResp, error)
		UpdateUserAddress(ctx context.Context, in *UpdateUserAddressReq, opts ...grpc.CallOption) (*UpdateUserAddressResp, error)
		DelUserAddress(ctx context.Context, in *DelUserAddressReq, opts ...grpc.CallOption) (*DelUserAddressResp, error)
		GetUserAddressById(ctx context.Context, in *GetUserAddressByIdReq, opts ...grpc.CallOption) (*GetUserAddressByIdResp, error)
		SearchUserAddress(ctx context.Context, in *SearchUserAddressReq, opts ...grpc.CallOption) (*SearchUserAddressResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUsercenter) SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.SetAdmin(ctx, in, opts...)
}

func (m *defaultUsercenter) CheckIsAdmin(ctx context.Context, in *CheckIsAdminReq, opts ...grpc.CallOption) (*CheckIsAdminResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.CheckIsAdmin(ctx, in, opts...)
}

// -----------------------用户联系方式----------------------
func (m *defaultUsercenter) AddUserContact(ctx context.Context, in *AddUserContactReq, opts ...grpc.CallOption) (*AddUserContactResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.AddUserContact(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdateUserContact(ctx context.Context, in *UpdateUserContactReq, opts ...grpc.CallOption) (*UpdateUserContactResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserContact(ctx, in, opts...)
}

func (m *defaultUsercenter) DelUserContact(ctx context.Context, in *DelUserContactReq, opts ...grpc.CallOption) (*DelUserContactResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.DelUserContact(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserContactById(ctx context.Context, in *GetUserContactByIdReq, opts ...grpc.CallOption) (*GetUserContactByIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserContactById(ctx, in, opts...)
}

func (m *defaultUsercenter) SearchUserContact(ctx context.Context, in *SearchUserContactReq, opts ...grpc.CallOption) (*SearchUserContactResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.SearchUserContact(ctx, in, opts...)
}

// -----------------------用户收货地址表-----------------------
func (m *defaultUsercenter) AddUserAddress(ctx context.Context, in *AddUserAddressReq, opts ...grpc.CallOption) (*AddUserAddressResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.AddUserAddress(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressReq, opts ...grpc.CallOption) (*UpdateUserAddressResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserAddress(ctx, in, opts...)
}

func (m *defaultUsercenter) DelUserAddress(ctx context.Context, in *DelUserAddressReq, opts ...grpc.CallOption) (*DelUserAddressResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.DelUserAddress(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAddressById(ctx context.Context, in *GetUserAddressByIdReq, opts ...grpc.CallOption) (*GetUserAddressByIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAddressById(ctx, in, opts...)
}

func (m *defaultUsercenter) SearchUserAddress(ctx context.Context, in *SearchUserAddressReq, opts ...grpc.CallOption) (*SearchUserAddressResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.SearchUserAddress(ctx, in, opts...)
}

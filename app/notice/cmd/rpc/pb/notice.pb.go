// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.4
// source: notice.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoticeLotteryDrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds   []int64 `protobuf:"varint,1,rep,packed,name=userIds,proto3" json:"userIds,omitempty"`
	LotteryId int64   `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`
}

func (x *NoticeLotteryDrawReq) Reset() {
	*x = NoticeLotteryDrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeLotteryDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeLotteryDrawReq) ProtoMessage() {}

func (x *NoticeLotteryDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeLotteryDrawReq.ProtoReflect.Descriptor instead.
func (*NoticeLotteryDrawReq) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{0}
}

func (x *NoticeLotteryDrawReq) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *NoticeLotteryDrawReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

type NoticeLotteryDrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoticeLotteryDrawResp) Reset() {
	*x = NoticeLotteryDrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeLotteryDrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeLotteryDrawResp) ProtoMessage() {}

func (x *NoticeLotteryDrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeLotteryDrawResp.ProtoReflect.Descriptor instead.
func (*NoticeLotteryDrawResp) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{1}
}

type NoticeSubscribePreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Openid      string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	TemplateId  string `protobuf:"bytes,3,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AcceptCount int64  `protobuf:"varint,4,opt,name=acceptCount,proto3" json:"acceptCount,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *NoticeSubscribePreference) Reset() {
	*x = NoticeSubscribePreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeSubscribePreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeSubscribePreference) ProtoMessage() {}

func (x *NoticeSubscribePreference) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeSubscribePreference.ProtoReflect.Descriptor instead.
func (*NoticeSubscribePreference) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{2}
}

func (x *NoticeSubscribePreference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NoticeSubscribePreference) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *NoticeSubscribePreference) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *NoticeSubscribePreference) GetAcceptCount() int64 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *NoticeSubscribePreference) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *NoticeSubscribePreference) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SaveNoticeSubscribePreferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid     string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=templateId,proto3" json:"templateId,omitempty"`
	Type       int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SaveNoticeSubscribePreferenceReq) Reset() {
	*x = SaveNoticeSubscribePreferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoticeSubscribePreferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoticeSubscribePreferenceReq) ProtoMessage() {}

func (x *SaveNoticeSubscribePreferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoticeSubscribePreferenceReq.ProtoReflect.Descriptor instead.
func (*SaveNoticeSubscribePreferenceReq) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{3}
}

func (x *SaveNoticeSubscribePreferenceReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *SaveNoticeSubscribePreferenceReq) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *SaveNoticeSubscribePreferenceReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type SaveNoticeSubscribePreferenceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveNoticeSubscribePreferenceResp) Reset() {
	*x = SaveNoticeSubscribePreferenceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNoticeSubscribePreferenceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNoticeSubscribePreferenceResp) ProtoMessage() {}

func (x *SaveNoticeSubscribePreferenceResp) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNoticeSubscribePreferenceResp.ProtoReflect.Descriptor instead.
func (*SaveNoticeSubscribePreferenceResp) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{4}
}

type GetNoticeSubscribePreferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid     string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=templateId,proto3" json:"templateId,omitempty"`
}

func (x *GetNoticeSubscribePreferenceReq) Reset() {
	*x = GetNoticeSubscribePreferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNoticeSubscribePreferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoticeSubscribePreferenceReq) ProtoMessage() {}

func (x *GetNoticeSubscribePreferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoticeSubscribePreferenceReq.ProtoReflect.Descriptor instead.
func (*GetNoticeSubscribePreferenceReq) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{5}
}

func (x *GetNoticeSubscribePreferenceReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetNoticeSubscribePreferenceReq) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type GetNoticeSubscribePreferenceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Openid      string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	TemplateId  string `protobuf:"bytes,3,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AcceptCount int64  `protobuf:"varint,4,opt,name=acceptCount,proto3" json:"acceptCount,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *GetNoticeSubscribePreferenceResp) Reset() {
	*x = GetNoticeSubscribePreferenceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNoticeSubscribePreferenceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoticeSubscribePreferenceResp) ProtoMessage() {}

func (x *GetNoticeSubscribePreferenceResp) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoticeSubscribePreferenceResp.ProtoReflect.Descriptor instead.
func (*GetNoticeSubscribePreferenceResp) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{6}
}

func (x *GetNoticeSubscribePreferenceResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetNoticeSubscribePreferenceResp) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetNoticeSubscribePreferenceResp) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *GetNoticeSubscribePreferenceResp) GetAcceptCount() int64 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *GetNoticeSubscribePreferenceResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetNoticeSubscribePreferenceResp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_notice_proto protoreflect.FileDescriptor

var file_notice_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x4e, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc5, 0x01, 0x0a, 0x19,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x20, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0xab, 0x02, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6c, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notice_proto_rawDescOnce sync.Once
	file_notice_proto_rawDescData = file_notice_proto_rawDesc
)

func file_notice_proto_rawDescGZIP() []byte {
	file_notice_proto_rawDescOnce.Do(func() {
		file_notice_proto_rawDescData = protoimpl.X.CompressGZIP(file_notice_proto_rawDescData)
	})
	return file_notice_proto_rawDescData
}

var file_notice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_notice_proto_goTypes = []interface{}{
	(*NoticeLotteryDrawReq)(nil),              // 0: pb.NoticeLotteryDrawReq
	(*NoticeLotteryDrawResp)(nil),             // 1: pb.NoticeLotteryDrawResp
	(*NoticeSubscribePreference)(nil),         // 2: pb.NoticeSubscribePreference
	(*SaveNoticeSubscribePreferenceReq)(nil),  // 3: pb.SaveNoticeSubscribePreferenceReq
	(*SaveNoticeSubscribePreferenceResp)(nil), // 4: pb.SaveNoticeSubscribePreferenceResp
	(*GetNoticeSubscribePreferenceReq)(nil),   // 5: pb.GetNoticeSubscribePreferenceReq
	(*GetNoticeSubscribePreferenceResp)(nil),  // 6: pb.GetNoticeSubscribePreferenceResp
}
var file_notice_proto_depIdxs = []int32{
	0, // 0: pb.notice.NoticeLotteryDraw:input_type -> pb.NoticeLotteryDrawReq
	5, // 1: pb.notice.GetNoticeSubscribePreference:input_type -> pb.GetNoticeSubscribePreferenceReq
	3, // 2: pb.notice.SaveNoticeSubscribePreference:input_type -> pb.SaveNoticeSubscribePreferenceReq
	1, // 3: pb.notice.NoticeLotteryDraw:output_type -> pb.NoticeLotteryDrawResp
	6, // 4: pb.notice.GetNoticeSubscribePreference:output_type -> pb.GetNoticeSubscribePreferenceResp
	4, // 5: pb.notice.SaveNoticeSubscribePreference:output_type -> pb.SaveNoticeSubscribePreferenceResp
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_notice_proto_init() }
func file_notice_proto_init() {
	if File_notice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeLotteryDrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeLotteryDrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeSubscribePreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoticeSubscribePreferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNoticeSubscribePreferenceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNoticeSubscribePreferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNoticeSubscribePreferenceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notice_proto_goTypes,
		DependencyIndexes: file_notice_proto_depIdxs,
		MessageInfos:      file_notice_proto_msgTypes,
	}.Build()
	File_notice_proto = out.File
	file_notice_proto_rawDesc = nil
	file_notice_proto_goTypes = nil
	file_notice_proto_depIdxs = nil
}
